栈的实现方式
##数组实现
public interface  MyStack<Item> extends Iterable<Item>{
        MyStack<Item> push(Item item);
        Item pop() throws Exception;
        boolean isEmpty();
        int size();
}
import java.util.Iterator;

public class ArrayStack<Item> implements MyStack<Item> {
    //栈元素数组只能通过转型来创建泛型数组
    private Item[] a=(Item[]) new Object[1];
    //元素数量
    private int N=0;


    @Override
    public MyStack<Item> push(Item item) {
        check();
        a[N++]=item;
        return this;
    }

    private void check() {
        if(N>=a.length){
            resize(2*a.length);
        }else if(N>0 && N<=a.length/4){
            resize(a.length/2);
        }
    }

    private void resize(int i) {
        Item[] temp=(Item[]) new Object[i];
        for (int j = 0; j <N ; j++) {
            temp[j]=a[j];
        }
        a=temp;
    }

    @Override
    public Item pop() throws Exception {
        if(isEmpty()){
            throw new Exception("Stack is Empty!");
            }
        Item item=a[--N];
        check();
        a[N]=null;//避免对象游离
        return item;
    }

    @Override
    public boolean isEmpty() {
        return N==0;
    }

    @Override
    public int size() {
        return N;
    }

    @Override
    public Iterator<Item> iterator() {
        //返回逆序遍历的迭代器
        return new Iterator<Item>() {
            private int i=N;
            @Override
            public boolean hasNext() {
                return i>0;
            }

            @Override
            public Item next() {
                Item item=a[--i];
                return item;
            }
        };
    }
}

